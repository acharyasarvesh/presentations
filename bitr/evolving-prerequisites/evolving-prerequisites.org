#+TITLE:  Prerequisites for Evolutionary Architecture
#+AUTHOR: Chris Howe-Jones
#+EMAIL: @agile_geek
#+DATE:  26th March 2020
#+REVEAL_INIT_OPTIONS: margin:0.2, keyboard:true, width:1080, height:760, slideNumber:false, center:false, reveal_rolling_links:false, reveal_overview:false, reveal_global_footer:false, progress:false, transition: 'concave'
#+REVEAL_THEME: solarized
#+REVEAL_HLEVEL: 1
#+REVEAL_ROOT: file:///home/chris/reveal.js-3.8.0
#+REVEAL_PLUGINS: (highlight markdown notes zoom)
#+REVEAL_SLIDE_FOOTER: @agile_geek
#+REVEAL_EXTRA_CSS: ./custom-stylesheet.css
#+MACRO: color @@html:<font color="$1">$2</font>@@
#+OPTIONS: toc:nil, timestamp:nil, num:nil

* Who am I?

  Name:      =Chris Howe-Jones= *[Technical Navigator]*

  Twitter:   =@agile_geek=

  Github:    =https://github.com/chrishowejones=

  Website:   =https://www.devcycle.co.uk=

#+REVEAL_HTML: <style>.reveal section img { background:none; border:none; box-shadow:none; }</style>
#+attr_html: :width 250px
[[./New DevCycle Logo Transparent.png]]

* Why evolutionary architecture?

  The only constant is change!

* Why evolve?

[TODO] Word cloud to demonstrate why change is most important

#+BEGIN_NOTES
  - Change is the overriding system quality in architecture.
    - Performance? We can change to optimise when need is proven.
    - Security? We can change to optimise when need is proven.
    - Governance? We can change to optimise when need is proven. Altho
      to some extent designing for change uses the tools of
      governance, as we will see later.
    - .... We can change to optimise when need is proven
  -
  - To support change we need to defer decisions to the last practical moment and we need to react quickly
  - Architecture is a social skill as much as a technical one. It’s about communication of a vision across a development team or teams
#+END_NOTES

* Key characteristics of evolution

  Adaption

** Adaption
 #+ATTR_REVEAL: :frag (roll-in)
     - New generations.
     - Feedback.
     - Room to fail (adaptations that don't survive).

** Adaption

 #+ATTR_REVEAL: :frag (roll-in)
   - Short cycles between generations.
   - Ability to fallback to earlier successful generations.
   - Generations can fail
   - Reactive to ecosystem
   - Impact on ecosystem

#+BEGIN_NOTES
   - Impact on ecosystem
   - Species have an impact on their ecosystem
     - Uncontrolled populations
     - Introduction of disruptive (alien) species
#+END_NOTES

* Translated to Software

#+ATTR_REVEAL: :frag (roll-in)
  - Separate deployment from release.
  - Fast feedback
    - In development
    - In production
  - Appropriate feedback
    - Metrics for architecturally important aspects
  - Responsive culture

* Pick your constraints
:PROPERTIES:
:reveal_background: ./constraints.gif
:reveal_background_size: 680px
:reveal_background_opacity: 1.0
:reveal_background_trans: slide
:END:

#+BEGIN_NOTES
  Constraints direct behaviour
  E.g.
    - Inverse Conways Law
    - Domain Driven Development
    - WIP limits (Kanban)
    - Immutability
    - FP vs OOP
    - BDD/TDD
#+END_NOTES

** Materials Matter
:PROPERTIES:
:reveal_background: ./languages.gif
:reveal_background_size: 680px
:reveal_background_opacity: 1.0
:reveal_background_trans: slide
:END:

#+BEGIN_NOTES
 The building materials we use in software really matters
     + Language
     + favour structural typing over nominal typing,
     + weak typing/strong typing
     + Type inference,
     + FP,
     + REPL or other feedback,
     + Immutability
     + Libraries and Frameworks - leaves and branches
     + API accretion (not versioning)

3 variables in JS have more potential states than all the atoms in the
planet earth!
Issue with a lot of implementations of v. strong nominal typing is that it assumes you definitively know a
judgement e.g. canonical verification of a type and when these
verifications are equal.
However, the business world is more shaded
than that in most cases for the larger concepts.

#+END_NOTES

** Materials Matter
:PROPERTIES:
:reveal_background: ./cd.gif
:reveal_background_size: 400px
:reveal_background_opacity: 1.0
:reveal_background_trans: slide
:END:

#+BEGIN_NOTES
    + Tooling - supporting fast feedback
      + CI
      + CD
      + Editors - refactoring, linting.
      + Dark deployments
      + Canary Deployments
      + Blue/green deployments
      + Automated testing
      + Alerting/Monitoring
      + Balance testing vs alerting/monitoring
#+END_NOTES

** Materials Matter
:PROPERTIES:
:reveal_background: ./smallteam.gif
:reveal_background_size: 540px
:reveal_background_opacity: 1.0
:reveal_background_trans: slide
:END:

#+BEGIN_NOTES
     + Team structure
       + Smaller - multi discipline,
       + DevOps
#+END_NOTES


** Materials Matter
:PROPERTIES:
:reveal_background: ./tech_debt.jpg
:reveal_background_size: 680px
:reveal_background_opacity: 1.0
:reveal_background_trans: slide
:END:

#+BEGIN_NOTES
     + Org structure
       + Software Development is core not a support function
       + Product/Platform thinking
       + Systems thinking
#+END_NOTES

** Materials Matter

 #+ATTR_REVEAL: :frag (roll-in)
   Because the constraints they introduce direct behaviour

* Separate Release From Deployment
:PROPERTIES:
:reveal_background: ./feature-toggle.jpeg
:reveal_background_size: 680px
:reveal_background_opacity: 1.0
:reveal_background_trans: slide
:END:

#+BEGIN_NOTES
  - DDD - contexts, aggregates
  - Feature toggling
  - Branch by abstractions
  - CI/CD
  - Immutable servers
#+END_NOTES

* Feedback

  Data (Hypothesis) Driven Development

** Feedback between Ecosystems
:PROPERTIES:
:reveal_background: ./ecosystems_feedback.png
:reveal_background_size: 640px
:reveal_background_opacity: 1.0
:reveal_background_trans: slide
:END:

#+BEGIN_NOTES
+ Each smaller ecosystem is effected by the larger outer ecosystem and
  each smaller ecosystem causes impact on the larger ecosystem.
+ Feedback timescales differ:
     - Micro-ecosystem - nanoseconds/milliseconds/seconds
     - Biotope - hourly/daily/weekly
     - Biome - weekly/monthly
     - Biosphere - quarterly/biannual/annual
#+END_NOTES

** Feedback in Micro-Ecosystem
:PROPERTIES:
:reveal_background: ./microecosystems.png
:reveal_background_size: 640px
:reveal_background_opacity: 1.0
:reveal_background_trans: slide
:END:

 #+BEGIN_NOTES
   - Automated developer level tests
   - Design feedback: TDD, BDD
   - REPL based development
   - Code reviews (PR’s etc.)
   - Architectural diagrams/documents - ADR’s etc.
#+END_NOTES

** Feedback in Biotope
:PROPERTIES:
:reveal_background: ./biotope.png
:reveal_background_size: 640px
:reveal_background_opacity: 1.0
:reveal_background_trans: slide
:END:

 #+BEGIN_NOTES
   - Workflow visualisations e.g. Kanban and Scrum boards
   - Cycle/Lead times
   - Stand ups
   - Show and Tell
   - Retrospectives
   - Pastoral care: Career progression
 Product/service level metrics e.g.
   - unique visitors
   - dwell time,
   - conversion rate,
   - average order value,
   - bounce rate,
   - mean time to fail,
   - mean time between failure,
   - mean time to repair,
   - mean time to defect
#+END_NOTES

** Feedback in Biome
:PROPERTIES:
:reveal_background: ./biome.png
:reveal_background_size: 640px
:reveal_background_opacity: 1.0
:reveal_background_trans: slide
:END:

#+BEGIN_NOTES
   - Rolled up workflow visualisations
   - Rolled up cycle/lead times
   - Rolled up retrospectives/standups
   - Metrics at dept/org level
     - Customer retention
     - Net Promoter Scores
     - Churn Rate
   - Customer satisfaction surveys
#+END_NOTES

** Feedback in Biosphere
:PROPERTIES:
:reveal_background: ./biosphere.png
:reveal_background_size: 640px
:reveal_background_opacity: 1.0
:reveal_background_trans: slide
:END:

#+BEGIN_NOTES
   - Market surveys
   - Consumer surveys
   - Competition analysis
   - P & L
#+END_NOTES


* TL;DR

  Separate Release from Deployment
#+ATTR_REVEAL: :frag (roll-in)
  - Feature toggling
  - DDD - contexts, aggregates
  - Branch by abstractions
  - CI
  - CD
  - Immutable servers

* TL;DR

  Feedback
#+ATTR_REVEAL: :frag (roll-in)
  - Automated testing
  - CI
  - CD
  - Automated Observability (alerting, logging, monitoring, etc)
  - Metrics at all levels
  - Visualisation of workflows
  - Retrospectives

* TL;DR

  Culture
#+ATTR_REVEAL: :frag (roll-in)
  - Pick you constraints (Materials matter)
  - Small for as long as possible
  - Defer design decisions
  - Simplify (not same as easy!)
  - Architecture is a social & group process
