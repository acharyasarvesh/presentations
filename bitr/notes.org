* Evolving Architecture (What can Nature teach us)                     :Home:

** Plot of talk

   - Only constant is change
     + I've been designing software systems for over 25 years
     + Started in monolithic homogeneous environment - mainframes
     + Automating basic processes in a large government org that changed rules every couple of years with change of the minister but within parameters mainly controlled by the speed with which the org could respond.
     + Environment was constrained and could only change at a fairly slow rate
     + In the 90's/00's software centred companies competed with new features as their selling point so speed of change became a competitive advantage.
     + Now we work in markets driven by customers that interact directly rather than indirectly.
     + Companies are built up around providing services that don't exist before the company introduces it.
       * Facebook (although arguably MySpace was also in that field)
     + Companies even more frequently provide solutions to problems that already have solutions but they add some additional novelty, usually in the form of features that provide a different form of
       interaction with the customer that didn't exist before the software was written.
       * Apple does this but often in the form of physical design combined with software e.g. the iPod wheel as the hook and iTunes which provided an interface that other MP3 download sites didn't have.
       * Slack does what IRC has done for 30 years but provided a UI that was more tactile and visual (introducing previews for images, emoji) but also, the killer feature, was a persistent history
         making the communication more async as you don't need to be online at the same time. Also providing a fermium model and removing the hosting barriers of some competitors. Having the message
         limits meant you can be away from the convo for a while but not too long introducing a compulsion to check regularly. Also focusing on teams rather than threaded comments, initially they
         implemented everything as a continuous stream which encouraged constant checking which is encourages compulsive behaviour.
     + We see companies starting with one vision of their offering but changing direction, sometimes quite radically.
       * Stuart Butterfield has done this a few times:
         - Ludicorp founded 2002 to build a game (called Game Neverending)
         - 2004 - game failed to gain traction but embedded photo-uploading was popular.
         - 2005 - game crumbled but Flickr rose from ashes
         - 2006 - Flickr sold to Yahoo
         - 2008 - Stuart left Yahoo to found Tiny Spec creating a game called Glitch.
         - 2010 - raised Series A funding, no detail about game but it was described as web-based massively-multiplayer game (Massively Mulitplayer Online Role-Playing Game MMORPG) epected launch 2010.
         - 2011 - raised more funding. Invite-based Beta. Launch but returned to Beta to make it easier for new players
         - 2012 - became obvious Glitch could not attract audience large enough to sustain itself. Glitch dead- Tiny Spec was not.
         - 2013 - internal comms tool used to share ideas between the US and Canadian offices of Glitch recognised as valuable
         - 2014 - Slack was announced.
   - Seeking different analogies - engineering is not a great one are there other perspectives?
     + Civil Engineering - Building the Tyne Bridge. No one widens the Tyne by 300 miles and relocates it to the South Pole mid project.
     + Engineering in Aerospace - flying a plane or guiding a spacecraft is defined by simple Newtonian physics. Lots of variables but simple equations.
     + What about biology?
   - How would software design map to biological systems?
   - How do classes/functions map to cells?
   - Message passing like neurochemical transmission
     + different types:
       * neurotransmitters - message calling between methods/functions?
       * blood - async message based systems, stream processing
       * nerve endings/hormones - endpoints recieving stimuli in the form of 'data' from the outside world.

   - Changes to architecture like evolutionary adaptation or acclimatization
     + adaptation - changes that are inherited.
       * larger changes involve adaptations across many generations (versions). Some are successful, some die. Takes generations to adapt.
       * smaller simpler organisms with shorter lifecycles can change faster than larger more complex organisms but they can do less.
     + acclimatization
       * smaller changes involve acclimatization - individual organism changed. Similar to stress hormones changing behaviour, or small physiological change. Still inherited.
   - Ecosystem is the runtime environment in the analogy
     + One of the issues is what state is the Ecosystem in?
     + This is not obvious, how do we measure or detect what the Ecosystem is doing as a whole while it's active?
     + How are parts of the ecosystem reacting in coordination to others?
   - Changes to the Ecosystem are changes to features, requirements, etc. Large changes are changes in climate, different ecosystem, etc.
   - Moving a specialised organism to a completely different ecosystem means it will struggle to survive or may simply die immediately.
   - Evolution is the organism changing over time to better exploit its ecosystem - the mechanism of evolution is the development team.

*** DDD Bounded Contexts

    Are DDD bounded contexts the equivalent of separate organisms? They evolve at there own rates. They may be affected by the same stimuli but they don't share internal structures.
    Abstractions within software (interfaces and data structures) are analogous to membranes and sensory mechanisms in organisms.

**** Monoliths

     Monoliths are like a single organism and the 'bounded context' are the organs (packages or namespaces). Organs can share nutrients, communication mechanisms (ganglia, neurotransmitters).
     If we analogise big ball of mud to uncontrolled growth this becomes cancer that spreads thru the organs (packages in contexts).

**** Services
     Services are individual organisms the boundaries of which are the 'bounded context'. Each service is separate. They evolve at their own rates. They may be affected by the same stimuli but they don't share internal structures.

**** Microservices
     Microservices are like a [[https://en.wikipedia.org/wiki/Siphonophorae][Siphonophorae]], like a [[https://en.wikipedia.org/wiki/Portuguese_man_o%2527_war][Portuguese man o' war]]. A bounded context is a colonial organism made up of small organisms that cooperate to get a task done. There are different types of organism with specialised functions zooids or polyps

**** Architectural faults \equiv Negative Environmental Factors
     Poor architecture in:
       - Monoliths - cancer(uncontrolled growth), disease (breakdown of shared classes, namespaces, etc).
       - Services - environmental changes - polution, poisonous environmental factors, extremes of heat and cold. Each individual service is subject to disease, cancer, etc.
       - Microservices - less impacted by disease, cancer as they're smaller/simpler organisms less to go wrong. Environmental changes in the colony effect the whole colony. We can lose an individual in the organism type in the colony and continue.
*** Individual Organisms mechanisms

    So if each organism is a monolith, a service or a microservice that operates within the bounds of it's ecosystem. How do they sense and communicate with the ecosystem or other 'organisms'?
**** Monoliths
     - Limited communication within the ecosystem. Tend to communicate with users (who are also part of the ecosystem) and maybe one or two other monolithic organisms (like a large database
       encompassing everything in it's schema that various monoliths require).
     - Has macro sensory features - message passing (sync and async)
     - Synchronous messaging - HTTP
       + Sync messaging sound waves to ear - sound waves from mouth/throat.
       + Light travels from organism to sensor. Light from pigmentation changes or movement travel back (pigmentation changes in Cuttlefish are thought to have a communication function, Chameleons
         colour change on changes in their mood.
     - Asynchronous messaging - broker based messaging systems (MQ, ActiveMQ, AMQP - Advanced Message Queuing Protocol)
       + Chemical communication
         * Leaving scent markers (mammals - marking territory, scent trails)
         * Leaving chemical trails in insects -chemo-receptors more like taste than smell (ants leaving chemical trails to food).
           - Learned behaviour,
           - master teaches student.
           - Ants returning with less or no food - trails not followed as much and they become stale.
           - Size of food droplets in experiment altered percentage of time laying a scent trail. Larger droplets- longer time dragging abdominal tip when droplet size lower than the ant's crop capacity.
           - Drinking time didn't seem to effect the amount of scent trail laid
     - Communication is at a large coarse level with only one or two other types of organism.
     - Monoliths as single individuals can get overwhelmed with data and they can scale by developing more sensory surface area and larger more complex internal 'organs' to process this.
     - Adding more individuals means they can handle more load but each organism is complex.
     - Relatively long life times - each new generation of a monolith averages a longer time as often changing a response to a stimuli means changing multiple organs or even worse the actual
       structures within the organism that are formed by a number of organs cooperating in a system (e.g. nervous system)

**** Services
     - Communication with more organisms to provide the overall result.
     - Communication mechanisms are the same but more communication goes on in the overall ecosystem.
     - Each service 'organism' is simpler than a monolith and more specialised closer to the 'systems' in a complex 'monolithic' organism (i.e respiratory system, circularly system, nervous system).
     - Lifespans of these more specialised organisms are slightly shorter. Less complex collections of classes (cells), packages (organs) and fewer (maybe only one or two) internal systems.
     - E.g. Ravens are seen to guide wolves to their prey (Ravens scavenge on left overs)
     - Badgers and Coyotes - eat burrowing rodents. Coyotes can't get to the rodents deep in burrows easily but hunting with Badger, Badger digs out rodent and if it tries to escape out of other exit
       Coyotes chase it down. Coyotes leavings from kills that ran ate by Badger, Badgers leavings from ones caught by burrowing feed Coyotes?

**** Microservices
     - Even more communication across even smaller more specialised organisms.
     - Lifespans can be very short.
     - Can quickly develop different polyps with a different specialisation.
     - Communication patterns and cooperation can be quite complex across the different organisms. Communication is not as well regulated as between organs in the body of a larger monolithic
       organism. Environment stimuli and factors can greatly affect communication and coordination between the different organisms in the colony.

*** Importance of feedback mechanisms in both biology & s/w

    - Feedback comes in two flavours: positive and negative feedback.

**** Negative Feedback
    - Damp down the effect of a stimulus

***** Homeostatic control (negative feedback)
      1. Stimulus– produces a change to a variable (the factor being regulated).
      2. Receptor– detects the change. The receptor monitors the environment and responds to change (stimuli).
      3. Input– information travels along the (afferent) pathway to the control center. The control center determines the appropriate response and course of action.
      4. Output– information sent from the control center travels down the (efferent) pathway to the effector.
      5. Response– a response from the effector balances out the original stimulus to maintain homeostasis.

***** Negative feedback mechanism in biology

      The control of blood sugar (glucose) by insulin is a good example of a negative feedback mechanism.
      1. When blood sugar rises, receptors in the body sense a change.
      2. In turn, the control center (pancreas) secretes insulin into the blood effectively lowering blood sugar levels.
      3. Once blood sugar levels reach homeostasis, the pancreas stops releasing insulin.

      Or temperature regulation in primates
      1. Sensors detect rise in temperature.
      2. Nerve pathways send messages to the control centres in the brain (hypothalamus)
      3. Hypothalamus sends signals to sweat glands to produce sweat.
      4. Skin cools

***** Negative feedback in software

      Circuit Breaker on a client.
      1. Clients send requests to many requests for a service to handle.
      2. Service starts to reject requests.
      3. Client implements a circuit breaker to back off until service recovers or another service is spun up to take on requests.

**** Positive Feedback
     - Amplify the effect of a stumulus.

***** Positive feedback in Biology

      A positive feedback loop comes into play during childbirth.
      1. In childbirth, the baby's head presses on the cervix—the bottom of the uterus, through which the baby must emerge—and activates neurons to the brain.
      2. The neurons send a signal that leads to release of the hormone oxytocin from the pituitary gland.
      3. Oxytocin increases uterine contractions, and thus pressure on the cervix.
      4. This causes the release of even more oxytocin and produces even stronger contractions.
      5. This positive feedback loop continues until the baby is born.

***** Positive feedback in software

      Positive feedback in software is driven by external agencies such as customer demand, management demand, changes in organisational focus.

      Studies have show that too much positive feedback promoting large changes in a single generation (version) of software systems tends to have a destabilising effect if there is not a commensurate
      negative feedback loop to dampen the effect. This can be seen in the 8 Laws of Software Evolution[fn:1] documented by M.M.Lehman.

      Positive feedback loops in software development (evolution) are the introduction of new features, new capabilities, changes in business model resulting in massive changes in structure and
      capabilities of not just the software design itself but in the structure of the team and the processes adopted by the team in software development (evolution).

      This is not always negative - positive feedback introducing changes in development process or materials can provide balanced growth if the changes introduced have inherent constraints that
      provide a negative feedback loop or dampening effect to appropriate characteristics of the system design or the development process.

      As an example, introducing a new programming language that has features that encourage constraints such as immutable data and pure functions can reduce the complexity of concurrent processing
      and simplify the developers mental model to not have to consider how state changes over time or race conditions etc. except at the edges of the system/component/service where state changes are
      pushed i.e. HTTP request/response, I/O to file systems or databases.

      Another example of positive feedback in the form of a change to the development process that intentionally introduces a constraint to guide development might be the introduction of WIP limits on
      a Kanban board. WIP limits ensure the development team are only working at the capacity they can sustain. They reduce the amount of waste in the process in the form of work at rest (waiting to
      be started). They also highlight when the team has too much work concurrently to manage. WIP limits also make it easier to tune cycle time (time between the work starting and delivery/) and lead
      time (time between a feature/story/requirement being raised and delivered).

*** Ecosystem

    The ecosystems of a software system include:

**** Microecosystem

***** Biological

      In biology an example of a microecosystem might be a pond which has a limited amount of variation. It's temperature differences are buffered. Water levels can raise or fall but are usually in
      predictable bounds.

***** Software

      1. Software executables
      2. OS
      3. Runtime environments
      4. Monitoring and logging.
      5. etc.

**** Habitat or Biotope


***** Biological

      In biology an example of a habitat might be the garden the pond is in. It has a limited number of species of flora and fauna. Predictable amounts of rainfall, temperature, shade etc.

***** Software

      1. Development processes
      2. Development team interactions
      3. Software languages
      4. Software tools

**** Biome

***** Biological

      In biology an example of a Biome would be Tropical Rainforest, Tundra, Hot Desert, etc.

***** Software

      1. Department or organisation.
      2. Customer base
      3. Target market
      4. Competitors in the same market

**** Biosphere

***** Biological

      In biology a biosphere is planetary scale e.g. Earth.

***** Software

      1. All markets
      2. All potential customers
      3. All competitors



*** Evolutionary Mechanism (Development Team)

    The development team and the organisation the team operates in are the main evolutionary mechanisms.

**** Evolution in Biological Systems

     - Adaption
     - Acclimatisation

***** Adaption

      Mechanisms that involve large changes to respond to environment pressures in the ecosystem. For example, a large and permanent temperature change, the introduction on competitive species.
      Adaption involves changes in the phenotype, therefore involving a new generation (version) of the 'species'. For example, adult stature or eye colour.

***** Acclimatisation

      Mechanisms that involve typically smaller variations in phenotypically plastic characteristics. For example, adjustments in heart rate, skin colour and attention span.


**** Evolution in Software Systems

     We can draw parallels between evolutionary mechanisms in software the biological systems


***** Adaption

      Involves changes to the code base, the structure of the code, etc. This involves releasing a new generation (version) of the software.

      These changes are triggered by a change in the habitat or the biome.

***** acclimatisation

      Changes using mechanisms built into the software to allow variation without a new generation (version) such as a circuit breaker tripping, or rate limits being hit that result in messages
      blocking or being rejected.

***** Other mechanism?

      It is not really clear if changing a parameterised feature, such as logging level or the threshold for rate limiting or circuit breaker timeout or threshold, is an acclimatisation or an
      adaption. However, there are mechanisms in Epigenetics where external or environmental factors result in a heritable phenotype change or phenotypically plastic changes. For example, stress
      factors in the environment may trigger a gene to activate or inhibit the expression of a gene without actually changing the nucleotide sequence.

**** Responding to changes in the Biome (org, customers, target market, competitors)

***** Biological responses

      Most organisms can't respond to major changes in their Biome by acclimatisation as the small variations possible are usually changes that are only capable of responding to the smaller variations
      that are confined to the local ecosystem of the habitat or biotope.

      Gradual or smaller changes to the biome can be responded to by adaption that happen in one or two generations through epigenetic mechanisms such as phenotype plasticity. These might be something like a
      dormant gene being activated by external factors. Morphological plasticity can be seen in pond snails that develop spiny shells in the presence of predators.

      Larger changes in the biome require more major genetic changes in the DNA and occur through a number of mechanisms, the best understood of which is gene mutation but recent research suggests
      other mechanisms such as stress hormones altering RNA transcription and the adoption of phenotypically plastic traits.

***** Software response

      The possible response mechanisms in software are controlled by the development team and associated stakeholders. The team can adopt techniques that provided a 'guided' evolutionary mechanisms.

      Smaller changes can be made in days in one generation (version) either by tweaking parameterised features or making small code changes to the internal mechanisms in a service or application.
      Generally speaking making these changes quickly is much easier if the software component is smaller.

      Larger changes to response take more major changes internally but also tend to change the interfaces of the software component. I.e. the interface for clients or the persistent data used is
      changed. These changes tend to alter factors that a coupled to other software components or to external customers/systems.

      What is frequently overlooked is that often this kind of change has an impact on the more complex microecosystem. As an example, making a change to add something to an API changes the
      responsibilities of the software component involved in a way that may mean that the component is now taking on responsibilities that it didn't have before. This can result in other software
      components at a later time connecting to the first to use this new responsibility. This kind of network effect increase the amount of communication and coordination required and hence may
      increase cross network traffic and result in hot-spots in the architecture.

***** Feedback loops in Software Development

****** Feedback loops in Code

       In general mechanisms to respond to stimuli that are built into 'code' or even 'configuration' tend to be negative feedback loops that respond to a an external stimuli by damping down or
       stabilising the software system.

       Good examples of this would be circuit breakers, bulkhead patterns or rate limiting.

****** Feedback loops in Development team and process

       The development team and the processes and tools that they use are a mix of negative feedback loops and positive feedback loops. Generally speaking, these changes are adopted to facilitate
       faster changes in certain directions. However, conversely, often the approaches and tools are successful in this because they have constraints (or negative feedback) that provides guide rails
       that push development towards the desired characteristics.

       As examples:
       1. adopting Kanban properly can greatly increase the speed of response to changes in the habitat but Kanban as a process has at it's heart strong constraints on the amount of work in progress
          at any point in time.
       2. adopting a functional programming language with immutable data structures can reduce the effort involved in developing software that has concurrent processes.
       3. adopting a microservices architecture that constrains the responsibility of a service to just one small part of a domain can result in the ability to respond faster to changes as a
          microservice can be changed in hours or replaced in days or a week.


**** Guided Evolution

     In order to guide software evolutionary processes the team needs to understand the ecosystem they are designing for. Traditionally, this has been an exercise in gathering and fixing
     requirements/features/stories but this is often flawed as to accurately determine what the Biotope is using static analysis based on peoples interpretation is inherently unconsciously biased.

     In order to determine what the ecosystem is we need to 'sense' the environment we are in.

***** Sensing the microecosytem

      - Traditional monitoring of running software. Memory, CPU, etc.
      - Monitoring and alerting on network effects like request rates, average/std deviation of request latency, etc.

***** Sensing the Habitat/Biome

      - Dwell time on a site
      - Conversion rates
      - Sales rates
      - Return rates
      - Usage rates of features
      - Customer location
      - Customer segmentation
      - A/B testing
      - Scientist type code experiments. Code that performs old and new way, compares results and reports differences while taking the old result as response.

***** Sensing the Biome

      - Surveying current customers and wider customer base
      - Market research
      - Industry research
      - Exploratory features or new apps targeting other markets
      - P & L
      - Board level decisions

***** Sensing the Biosphere

      - Major organisational events (mergers, buyouts, bankruptcy proceedings)

***** Feedback from sensors tune evolution

      - Feedback from these sensors are used to tune the evolutionary processes at the appropriate level.
      - You can move to respond to changes in a wider ecosystem by changing the processes and the sensors to guide evolution to respond to the large change over generations of the software design.
      - Conversely, detecting changes in a sensors output over time in a narrower ecosystem can suggest that a large change is occurring in a wider ecosystem.

**** Factors that influence software evolution

     - Not designing a sensor/response feedback mechanism
     - Bad development practices making response to change harder or impossible
     - Poor code hygene (this is equivalent to knots in DNA that make RNA transcription of that part of the DNA chain impossible)
     - Constraints on the ecosystems that inhibit the ability to sense or respond to change. Typically, edicts to follow a directive/std with no understanding or explanation of the reasoning behind this.
     - Over population effects poisoning the ecosystem. Too big a team, too many teams, too much change in the narrower ecosystem.


*** Conclusion

    - Identify the factors that matter and pick metrics that measure them
    - Design your feedback loops (sensor/receptors) and effectors
    - Identify beneficial constraints vs detrimental constraints (e.g. service boundaries or immutable data vs inability to change biotope due to policy/stds)
    - People (the team) are your mechanism for evolution - they need to know what constraints are imposed and why and the directions of freedom as well as the results of sensory input.


** General thoughts
                                                                                                                                                                            :LOGBOOK:
   - State "CCC"        from "DOING"      [2018-08-20 Mon 08:38]
   - State "DOING"      from "DONE"       [2018-08-20 Mon 08:38]
   - State "DONE"       from "WAITING"    [2018-08-20 Mon 08:38]
   - State "DONE"       from "DOING"      [2018-08-20 Mon 08:38]
   - State "DOING"      from "CCC"        [2018-08-20 Mon 08:38]
   - State "CCC"        from "TODO"       [2018-08-20 Mon 08:38]
                                                                                                                                                                                :END:
   + Event storming? [Can't remember where I was going with this)
   + feedback thru metrics larger topic of feedback (technical in macro/micro/social)
   + [[https://medium.com/featured-insights/understanding-how-design-thinking-lean-and-agile-work-together-88b123a2bc6a][Design thinking]]
   + metrics matter
   + Ants cooperate by feedback
   + Evolution didn't start off with specialised organisms
   + Need to have mutations that die
   + Develop sensors to feel the environment
   + S/w environments adapt and change rapidly - over specialised
     'organisms' will die.
   + Abstractions impose constraints
     + the abstraction becomes the
       environment your software 'grows' in
     + imposing the wrong abstraction or even the right abstraction
       too early carries a cost for the future generations (it's the
       software equivalent of climate change)
   + Neurons - electrical to chemical synapsis like bulkheads and
     circuit breakers
   + Cancer cells - big ball of mud, too many projects/dev's changing
     too much code.
   + DNA knots caused by stress hormones mean that the RNA polymerase can't unzip the DNA fully and either can't transcribe the DNA to replicate or can only partially transcribe. Again Big Ball of Mud.

** Positive feedback and alternative stable states in inbreeding, cooperation, sex roles and other evolutionary processes

   + Negative feedback - population regulation (analogy to
     distributed systems?)
   + Frequency-dependent selection - (polymorphisms in Biology not CS!)
   + Negative feedback - stabilizing factor
   + Positive feedback - self-reinforcing, de-stabilizing
   + Disruptive selection - alternative stable states or protected polymorphisms
   + Explore balance of negative and positive feedback.
     + Positive feedback - exploring new phenotype - some may die
     + Negative feedback - damping effect, stabilising but resistant
       to change.
   + Negative feedback loops (operational and micro to damp down effects)
     + Alerts triggered on thresholds
     + Self monitoring - adjusting
     + Thresholds and boundaries
       + Bulkheads
       + Circuit Breakers
   + Positive feedback loops (development and macro- to facilitate change)
     + Setting alert thresholds
     + Deciding on metrics
     + Designing self adjusting / monitoring thresholds
   + Positive feedback loops (people - process)
   + Negative feedback loops (code - tests - design)
** https://theconversation.com/listening-to-nature-how-sound-can-help-us-understand-environmental-change-105794
   + Changes in environment change the sonic signature.
     + Loss of damping materials (leaves, etc) increases
       reverberation.
     + Predators struggle to identify prey direction due to echoes.

** http://www.octopus.furg.br/fisicomp/disciplinas/adaptacao/acclimatization.pdf

** Feedback loops in biology

*** Negative feedback loops
    + Damp down the effect of a stimulous - bulkheads, circuit breakers
    + Need some examples of negative feedback loops in nature.
*** Positive feedback loops
    + Amplifies the effect of a stimulous - we want positive feedback loops to either have a paired negative feedback loop to damp it down when it amplifies too much. Positive feedback loops in architecture (excepting AI) are implemented
      by the development team.
    + Need some examples of positive feedback loops in nature.
*** Example:
**** Homeostatic control
     1. Stimulus– produces a change to a variable (the factor being regulated).
     2. Receptor– detects the change. The receptor monitors the environment and responds to change (stimuli).
     3. Input– information travels along the (afferent) pathway to the control center. The control center determines the appropriate response and course of action.
     4. Output– information sent from the control center travels down the (efferent) pathway to the effector.
     5. Response– a response from the effector balances out the original stimulus to maintain homeostasis.

***** Negative feedback mechanism
      The control of blood sugar (glucose) by insulin is another good example of a negative feedback mechanism. When blood sugar rises, receptors in the body sense a change . In turn, the control center (pancreas) secretes insulin into
      the blood effectively lowering blood sugar levels. Once blood sugar levels reach homeostasis, the pancreas stops releasing insulin.

***** Positive feedback mechanism
     During labor, a hormone called oxytocin is released that intensifies and speeds up contractions. The increase in contractions causes more oxytocin to be released and the cycle goes on until the baby is born. The birth ends the release
     of oxytocin and ends the positive feedback mechanism.


**** Homeostasis in neurotransmitters
     Once neutrons fire, they do need a short refractory period that allows them to be able to fire again - called resting potential. http://www.dummies.com/how-to/content/understanding-the-transmission-of-nerve-impulses.html image source
     here

     https://poweronpoweroff.com/blogs/longform/a-guide-to-neurotransmitter-balance

***** Neurotransmitter balance
      The brain is constantly striving to keep your different neurochemical systems in balance in response to your ongoing internal and external needs - something that it does through constant neurobiological and synaptic shifts which
      alter the levels of different neurotransmitters. For example during the night when you need to sleep, the inhibitory neurotransmitter GABA blocks the activity of other neurotransmitter systems, shifting the balance in it’s favor. In
      contrast, during the day when you need to think and react, the brain rebalances itself so that these other neurotransmitter systems stop being under sleep-based inhibitory control and are more free to send messages through their
      respective neural systems.

****** WHAT MECHANISMS DOES THE BRAIN PUT IN PLACE TO MAINTAIN ITS BALANCE OF NEUROTRANSMITTERS?
******* THE BLOOD BRAIN BARRIER
        The brain's blood brain barrier is a gateway into the brain and is very strict about which chemicals it will allow in - something that is controlled by the array of transporter proteins and chemical gates located within it, which
        all operate within specific parameters. [Bulkheads, Validation]

******* TRANSPORTER REUPTAKE PROTEINS
        Within the synaptic space there are transporter proteins which are there to mop up any excess neurotransmitters, or to quickly remove the neurotransmitter once it is no longer required. [Circuit Breaker, Timeouts, Health endpoints
        in combination with monitoring, schedulers, etc e.g. K8s, Swarm, etc.]

******* SUPPORTING GLIAL CELLS
        Although much of the focus is on the neurons which carry the signals around the brain, the supporting cells which help them to do this - the glia - play an important role in ensuring that neurotransmitter balance is maintained
        within the brain. [timeouts, circuit breakers, validation]

******* RELEASE MECHANISMS
        Neurotransmitter release from the sending neurons is a tightly controlled process to make sure not too much neurotransmitter is released into the synapse at any one time. [version control, release mechanisms, API versioning, API accretion]

******* RATE LIMITING ENZYMES
        The enzymes which synthesize and degrade the neurotransmitters are rate limiting in their mode of action which means that the speed at which neurotransmitters are generated and broken down can be tightly controlled. [rate limiting]

******* INTER-DEPENDENT PRECURSORS
        The synthesis of neurotransmitters is part of a carefully constructed cycle, where the precursors and the end products are interdependent. For example, inhibitory GABA is synthesized from excitatory Glutamate. This means that each
        neurotransmitter isn’t synthesized in isolation but as part of a wider process of balancing the brain's overall neurochemistry. [k8s, swarm, service coordination and choreography]

****** WHAT ENVIRONMENTAL FACTORS INFLUENCE YOUR BRAIN’S NEUROTRANSMITTER BALANCE?

******* Diet
        Ammino acids, energy supplies (carbs and fats), vitamins, minerals. [Equivalent to tooling, languages, development process and practices]

******* Medication and Drugs
        Can mimic effects of neurotransmitters (e.g amphetamine acting on catecholamine receptors). to enhance their effects of the neurotransmitter (e.g. benzodiazepines potentiate the action of GABA receptors) or to prevent their
        reuptake (as is the case with cocaine and catecholamines or Prozac and serotonin). Other drugs work to block (antagonize) receptors, for example the action of the beta-blocker propranolol on noradrenergic and adrenergic receptors.
        [poor development disciplines, uncontrolled change]

******* Chronic Stress
        Being chronically stressed causes more glutamate than normal to be released at synapses in the brain’s prefrontal regions - involved in higher-order thinking - and hippocampus - a region involved in memory.

****** HOW DO WE CORRECT NEUROTRANSMITTER IMBALANCES?

******* TARGETED AMINO ACID THERAPIES
        Targeted amino acid therapies work by substantially altering the relative balance of amino acids ingested within your diet. [architectural restructuring]

******* EXERCISE
        Doing high-intensity exercise increases the availability of brain tryptophan and promotes the synthesis of serotonin which, in combination with changes in the other monoamine neurotransmitter systems, mediates the behavioural
        sensations of fatigue and subsequent positive changes in mood. [Good developer disciplines - version control, TDD, pairing, automated testing, linting, retrospectives, refactoring]

* Footnotes

[fn:1] http://labs.cs.upt.ro/labs/acs/html/resources/Lehman-2.pdf
