#+OPTIONS: toc:nil num:nil timestamp:nil
#+OPTIONS: reveal_width:1200
#+OPTIONS: reveal_height:800
#+TITLE: The Never Changing Face of Immutability
#+AUTHOR: Chris Howe-Jones
#+EMAIL: @agile_geek
#+DATE:  19th July 2016
#+REVEAL_SLIDE_NUMBER: false
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.4
#+REVEAL_MAX_SCALE: 2.5
#+OPTIONS: reveal_rolling_links:t reveal_overview:t reveal_keyboard:{40:\'next\'\,38:\'prev\'}
#+REVEAL_THEME: league
#+REVEAL_TRANS: convex
#+REVEAL_HLEVEL: 2
#+REVEAL_CENTER: false
#+REVEAL_ROOT: reveal.js
#+REVEAL_PLUGINS: (markdown notes highlight)

* Who am I?

 Name:      =Chris Howe-Jones=

 Job Title: =Technical Navigator=

 Twitter:   =@agile_geek=

 Github:    =github.com/chrishowejones=

 Blog:      =chrishowejones.wordpress.com=

* Credentials
#+BEGIN_NOTES
   Like to relate to my audience so:
   * Ask who is Java developer/programmer
   * Ask who has FP experience: Java 8, Scala, etc.
   * Anyone from FP group?
#+END_NOTES

** Languages
[[./languages.png]]
** Employers
[[./employers.png]]
** Roles
[[./jobs.png]]

* Warning!!

   * There will be a Lisp!
   * There will be Entomology!
   * There will be History!
#+BEGIN_NOTES
  * 1st law of Clojure talks
  * Any talk with Clojure in it must have some entomology
#+END_NOTES

* The Never Changing Face of Immutability

   [[./immutable-defined.png]]


** History Lesson

   [[./John-McCarthy.jpg]]

#+BEGIN_NOTES
  * Who is this?
  * John McCarthy
     - developed Lisp
     - influenced design of ALGOL
     - invented GC
     - created term AI
     - first to suggest publicly the idea of utility computing
     - credited with developing an early form of time-sharing
#+END_NOTES

** Once upon a time..

   [[./book-keepers.jpg]]

   Book Keeping
#+ATTR_REVEAL: :frag (roll-in)
   * List of entries in a ledger
#+ATTR_REVEAL: :frag (roll-in)
   * No 'crossing out'!

#+BEGIN_NOTES
   * Book keeping is immutable.
   * Facts don't change - the fact that is current may differ.
   * Double entry book keeping
     - corrections are new entries
     - deletions are redacted facts/entries
#+END_NOTES

*** Dawn of Computing

   [[./EDSAC.jpg]]

   * Math
   * Transient storage

#+BEGIN_NOTES
   * EDSAC - Electronic Delay Storage Automatic Calculator
   * Cambridge 1949 - early general purpose electronic programmable computer (ENIAC 1946 was 1st)
   * Storage - mecury delay lines, derated vacuum tubes for logic
   * n 1950, M. V. Wilkes and Wheeler used EDSAC to solve a differential equation relating to gene frequencies in a paper by Ronald Fisher. This represents the first use of a computer for a problem in the field of biology.
   * In 1951, Miller and Wheeler used the machine to discover a 79-digit prime – the largest known at the time.
   * In 1952, Sandy Douglas developed OXO, a version of noughts and crosses (tic-tac-toe) for the EDSAC, with graphical output to a VCR97 6" cathode ray tube. This may well have been the world's first video game.
#+END_NOTES

*** 60's-90's

    [[./1960s-computer.jpg]]

  * Spot the expense/value?
#+ATTR_REVEAL: :frag (roll-in)
  * Memory
#+ATTR_REVEAL: :frag (roll-in)
  * Tape
#+ATTR_REVEAL: :frag (roll-in)
  * Disk



** And..

   [[./fry-so.jpg]]

*** In place computing

   [[./core_memory.jpg]]

#+ATTR_REVEAL: :frag (roll-in)
  * Update data in place
#+ATTR_REVEAL: :frag (roll-in)
  * Reuse expensive real estate

#+BEGIN_NOTES
  * Magnetic core memory 1955-75
  * Core uses tiny magnetic toroids (rings), the cores, through which wires are threaded to write and read information.
  * Each core represents one bit of information.
  * Magnetized in 2 directions (clockwise/counterclockwise) to represent 1 or 0
#+END_NOTES

*** RDBMS

   [[./disk-pack.jpg]]

#+ATTR_REVEAL: :frag (roll-in)
   * Data updated
#+ATTR_REVEAL: :frag (roll-in)
   * Values overwritten
#+ATTR_REVEAL: :frag (roll-in)
   * Reuse memory and disk

#+BEGIN_NOTES
   * Disk pack - invented 1965
   * IBM Engineers - Thomas G. Leary and R. E. Pattison
   * Probably about 50MB on this one.
#+END_NOTES

** Result?

In place oriented programming (PLOP) relies on...

*** Mutation

    [[./mutation.jpg]]

*** Which leads to..

   [[./complect.png]]

*** Complect

   [[./plaiting.jpg]]

#+ATTR_REVEAL: :frag (roll-in)
   * Complecting Identity & Value
#+ATTR_REVEAL: :frag (roll-in)
   * Especially RDBMS, OOP
#+ATTR_REVEAL: :frag (roll-in)
   * Pessimistic concurrency strategies

** 21st Century

   [[./pair-programming.png]]

   Spot the expense/value?
#+ATTR_REVEAL: :frag (roll-in)
  * Developers, Software
#+ATTR_REVEAL: :frag (roll-in)
  Cheap resources: SSD/Disk, Memory, CPU

*** What's changed?
   [[./historical_cost_graph5.gif]]

   * Computing capacity has increased by a million fold!

** Immutability (and values) to the rescue!

   [[./lambda-man.jpg]]

*** Values

    [[./values.jpeg]]
    * Values are generic
    * Values are easy to fabricate
    * Drive reuse
    * Values aggregate to values
    * Distributable

*** Isn't copying values inefficient?

   * Structural sharing
   * For example in Clojure:
     - persistent bit-partitioned vector trie
     - 32 node tries
     - Wide shallow trees

**** Immutable Lists

**** Immutable Vectors

**** Immutable Vectors (update)

**** Immutable Vectors (insert)

** What does it look like?

   * Immutable by default
   * Explicit state change
   * Database as a value

#+BEGIN_NOTES
   * Make state change obvious
   * Pass a snapshot of the database as a value
      - always remote
   * Lack of Basis from database
      - consistency across long term conversations
      - what does update mean?
#+END_NOTES

*** ClojureScript on the client

#+BEGIN_SRC clojure
  (def initial-state
    {:event {:event/name "" :event/speaker ""} :server-state nil})
#+END_SRC
#+BEGIN_SRC clojure
  (defn- event-form
    [ui-channel {:keys [event/name event/speaker] :as event}]
    [:table.table
     [:tr
      [:td [:label "Event name:"]]
      [:td [:input {:type :text
                    :placeholder "Event name..."
                    :defaultValue event/name
                    :on-change (send-value! ui-channel m/->ChangeEventName)}]]]
     [:tr
      [:td [:label "Speaker:"]]
      [:td [:input {:type :text
                    :placeholder "Speaker..."
                    :defaultValue event/speaker
                    :on-change (send-value! ui-channel m/->ChangeEventSpeaker)}]]]
     [:tr
      [:td
       [:button.btn.btn-success
        {:on-click (send! ui-channel (m/->CreateEvent))}
        "Go"]]]])
#+END_SRC

#+REVEAL: split

#+BEGIN_SRC clojure
(defrecord ChangeEventName [name])

(defrecord ChangeEventSpeaker [speaker])

(defrecord CreateEvent [event])

(defrecord CreateEventResults [body])
#+END_SRC
#+BEGIN_SRC clojure
(extend-protocol Message
  m/ChangeEventName
  (process-message [{:keys [name]} app]
    (assoc-in app [:event :event/name] name)))
;; redacted for clarity ...

(extend-protocol EventSource
  m/CreateEvent
  (watch-channels [_ {:keys [event]
                      :as app}]
    #{(rest/create-event event)}))

(extend-protocol Message
  m/CreateEventResults
  (process-message [response app]
    (assoc app :server-state (-> response :body))))
#+END_SRC

*** Efficiency

   [[./todomvc-perf-comparison.png]]

** Clojure on the server

#+BEGIN_SRC clojure
  (defn- handle-query
    [db-conn]
    (fn [{req-body :body-params}]
      {:body (case (:type req-body)
               :get-events (data/get-events db-conn)
               :create-event (data/create-entity db-conn (:txn-data req-body)))}))


  (defn app [dbconn]
    (-> (routes
         (GET "/" [] home-page)
         (POST "/q" []
               (handle-query dbconn))
         (resources "/"))
        (wrap-restful-format :formats [:edn :transit-json])
        (rmd/wrap-defaults (-> rmd/site-defaults
                               (assoc-in [:security :anti-forgery] false)))))
#+END_SRC

** Datomic for Data

   [[./datomic-architecture.png]]

   * App get's its own query, comms, memory- Each App is a peer

#+BEGIN_NOTES
   * Apps are peers
   * Transactor broadcasts txns to peers
   * Peers cache data locally
#+END_NOTES

*** Database as a value

    | Entity | Attribute | Value   | Time       |
    |--------+-----------+---------+------------|
    | Fiona  | likes     | Ruby    | 01/06/2015 |
    | Dave   | likes     | Haskell | 25/09/2015 |
    | Fiona  | likes     | Clojure | 15/12/2015 |
    |        |           |         |            |
    |--------+-----------+---------+------------|
    |        |           |         |            |

   * Effectively DB is local
   * Datalog query language
#+BEGIN_SRC clojure
[:find ?e :where [?e :likes “Clojure”]]
#+END_SRC

#+BEGIN_NOTES
   * Ask connection for database - it returns a value representing the db
   * This is because datoms are immutable - new versions thru time
   * Can invoke your own code from query engine as data is just normal data structures (lists, maps, etc.)
   * Assertions and retractions of facts (Datoms)
#+END_NOTES

*** Schema

#+BEGIN_SRC clojure
   ;;event
   {
    :db/id                 #db/id[:db.part/db]
    :db/ident              :event/name
    :db/cardinality        :db.cardinality/one
    :db/valueType          :db.type/string
    :db/unique             :db.unique/identity
    :db.install/_attribute :db.part/db
    }
   {
    :db/id                 #db/id[:db.part/db]
    :db/ident              :event/description
    :db/cardinality        :db.cardinality/one
    :db/valueType          :db.type/string
    :db.install/_attribute :db.part/db
    }
   {
    :db/id                 #db/id[:db.part/db]
    :db/ident              :event/location
    :db/cardinality        :db.cardinality/one
    :db/valueType          :db.type/ref
    :db.install/_attribute :db.part/db
    }
  ...
#+END_SRC
#+REVEAL: split
#+BEGIN_SRC clojure
  ;;location
   {
    :db/id                 #db/id[:db.part/db]
    :db/ident              :location/postCode
    :db/cardinality        :db.cardinality/one
    :db/valueType          :db.type/string
    :db.install/_attribute :db.part/db
    }
   {
    :db/id                 #db/id[:db.part/db]
    :db/ident              :location/description
    :db/cardinality        :db.cardinality/one
    :db/valueType          :db.type/string
    :db.install/_attribute :db.part/db
    }
  ...
#+END_SRC
*** Persistence

#+BEGIN_SRC clojure
  (defn create-entity
    "Takes transaction data and returns the resolved tempid"
    [conn tx-data]
    (let [had-id (contains? tx-data ":db/id")
          data-with-id (if had-id
                         tx-data
                         (assoc tx-data :db/id #db/id[:db.part/user -1000001]))
          tx @(d/transact conn [data-with-id])]
      (if had-id (tx-data ":db/id")
          (d/resolve-tempid (d/db conn) (:tempids tx)
                            (d/tempid :db.part/user -1000001)))))
#+END_SRC
#+BEGIN_SRC clojure
  (defn get-events [db]
    (d/pull-many db [:*]
                 (->> (d/q '{:find [?event-id]
                             :where [[?event-id :event/name]]}
                           db)
                      (map first))))
#+END_SRC

** Conclusion?
   [[./you-cant-step.jpg]]
   * Immutability simplifies
   * State as function call stack
   * Mostly pure functions
      - Easier to test & reason about
   * Time as first class concept
   * Easier to distribute

* Resources

  * Rich Hickey talks -
    - 'The Value of Values'
    - 'The Language of the System'
    - 'Simple Made Easy'
    - 'Clojure, Made Simple'
    - 'The Database as a Value'
    - 'The Language of Systems'
  * Moseley and Marks - Out of the Tar Pit
  * Kris Jenkins
    - 'ClojureScript - Architecting for Scale' (Clojure eXchange 2015)

#+BEGIN_NOTES
    * History
      - book keeping - double entry. Didn't change in place.
      - 50's, 60's memory expensive resource (dates? picture of large old machine)
      - Swapping instructions in and out of memory - tape -> disk
      - 70's, 80's and 90's secondary storage expensive - rise of RDBMS
      - memory still reasonably expensive
      - In place computing as resources scarce
      - 00's and 2010's disk cheaper, memory very cheap.
      - in parallel the rise of OOP - objects with data and behaviour
    * Why immutability?
      - What does mutation bring (picture of three eyed fish from Simpsons _ other pop culture references)
      - Can't stand in same river twice (where is origin of quote?)
      - Complecting the concepts of identity and value particularly OO and RDBMS in trad. use.
      - Issues of concurrency. Complex values are changed underneath you.
      - Optimisations - (dig out graph of Om compared with React.js)
    * What does it look like?
      - Examples in:
        + Clojurescript - UI state as a value
        + Clojure - server state as value and a chain of functions
        + Datomic - database as a value - local cache, peer to peer
#+END_NOTES
